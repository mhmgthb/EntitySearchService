/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package sa.qiwa.cache.search.ms.presentation.api;

import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;
import sa.qiwa.cache.search.ms.application.delegator.SearchApiDelegate;
import sa.qiwa.cache.search.ms.domain.model.EntityName;
import sa.qiwa.cache.search.ms.domain.model.SearchResponse;
import sa.qiwa.cache.search.ms.domain.model.SearchRequest;

import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
public interface SearchApi {

    default SearchApiDelegate getDelegate() {
        return new SearchApiDelegate() {};
    }

    /**
     * POST /search/{entityName} : Search entity using elastic search service
     * Search entity using search service
     *
     * @param entityName  (required)
     * @param searchRequest search Criteria will contain all filters and other criteria to search entity (required)
     * @return Success (status code 200)
     *         or Bad request (status code 400)
     *         or Entity not found (status code 404)
     *         or Validation error (status code 409)
     *         or Internal server error (status code 500)
     *         or The request method is not supported (Not Implemented) (status code 501)
     *         or Service unavailable due to invalid backend response(Bad Gateway) (status code 502)
     *         or Service unavailable (Under maintenance or overloaded) (status code 503)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/search/{entityName}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<SearchResponse>> searchEnity(
         @PathVariable("entityName") EntityName entityName,
         @Valid @RequestBody SearchRequest searchRequest,
         final ServerWebExchange exchange
    ) {
        return getDelegate().searchEnity(entityName, searchRequest, exchange);
    }

}
